/* Generated by AN DISI Unibo */ 
package it.unibo.coldstorageservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Coldstorageservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
					val MAXW : Int = 100
					var CurrentWeight : Int = 0
					var FreeSpace : Int = 100
					var TruckLoad : Int = 0
					var Ticket : Int = 1234
					var TruckTicket : Int = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("FRIDGE SERVICE START, capienza: ${MAXW}, free space:${FreeSpace}")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("state_idle") { //this:State
					action { //it:State
						CommUtils.outgreen("waiting for requests...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handle_request",cond=whenRequest("storerequest"))
					transition(edgeName="t05",targetState="ticketvalidation",cond=whenRequest("verifyticket"))
				}	 
				state("handle_request") { //this:State
					action { //it:State
						CommUtils.outgreen("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("storerequest(kg)"), Term.createTerm("storerequest(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 TruckLoad = payloadArg(0).toInt()  
								if(  TruckLoad<= FreeSpace  
								 ){ FreeSpace -= TruckLoad 
													CurrentWeight += TruckLoad
								CommUtils.outgreen("richiesta di deposito accettata, carico: ${TruckLoad} kg, spazio libero nel frigo: ${FreeSpace} kg.")
								answer("storerequest", "loadaccepted", "loadaccepted(Ticket)"   )  
								}
								else
								 {CommUtils.outgreen("richiesta di deposito rifiutata, non c'e spazio sufficiente")
								 answer("storerequest", "loadrejected", "loadrejected(_)"   )  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
				state("ticketvalidation") { //this:State
					action { //it:State
						CommUtils.outgreen("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("verifyticket(ticket)"), Term.createTerm("verifyticket(TruckTicket)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 TruckTicket = payloadArg(0).toInt()  
						}
						if(  TruckTicket == Ticket  
						 ){CommUtils.outblack("biglietto valido, inizio il deposito del carico da indoor a cold room")
						answer("verifyticket", "chargetaken", "chargetaken(_)"   )  
						forward("doJob", "doJob(_)" ,"transporttrolley" ) 
						}
						else
						 {CommUtils.outgreen("biglietto non valido, impossibile procedere con il deposito")
						 answer("verifyticket", "invalidticket", "invalidticket(_)"   )  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="state_idle", cond=doswitch() )
				}	 
			}
		}
}
