/* Generated by AN DISI Unibo */ 
package it.unibo.testgui

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Testgui ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var Load : Int =0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("GUI START, sending request to cold storage service")
						delay(3000) 
						request("storerequest", "storerequest(20)" ,"coldstorageservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="enterticket",cond=whenReply("loadaccepted"))
					transition(edgeName="t01",targetState="handlereject",cond=whenReply("loadrejected"))
				}	 
				state("handlereject") { //this:State
					action { //it:State
						CommUtils.outblue("frigo pieno, impossibile depositare altro cibo")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("enterticket") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("loadaccepted(ticket)"), Term.createTerm("loadaccepted(ticket)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Load = payloadArg(0).toInt()  
						}
						delay(2000) 
						CommUtils.outblue("inserimento codice biglietto per verifica")
						request("verifyticket", "verifyticket(ticket)" ,"coldstorageservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="finish",cond=whenReply("chargetaken"))
					transition(edgeName="t03",targetState="timeout",cond=whenReply("invalidticket"))
				}	 
				state("finish") { //this:State
					action { //it:State
						CommUtils.outblue("deposito andato a buon fine, termino...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("timeout") { //this:State
					action { //it:State
						CommUtils.outblue("biglietto non valido o tempo scaduto, provare nuovamente a inviare una richiesta")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
