System test_sprint1

Request storerequest : storerequest(TruckLoad)
Reply loadaccepted : loadaccepted(Ticket)
Reply loadrejected : loadrejected(_)

Request verifyticket : verifyticket(TruckTicket)
Reply chargetaken : chargetaken(_)
Reply invalidticket : invalidticket(REASON)

Request loaddone : loaddone(TruckTicket)
Reply goaway : goaway(_)
Reply depositfailed : depositfailed(_)

Request generateticket : generateticket(TruckLoad)
Reply ticket : ticket(Ticket)

//Dispatch expiredticket : expiredticket(Ticket)



Context ctxtestsprint1 ip [host="localhost" port=9999]







QActor test_coldstorageservice_sprint1 context ctxtestsprint1 {

	State s0 initial{
		delay 1000
		println("COLD STORAGE SERVICE STARTING, waiting for requests...") color green
		delegate "storerequest" to test_coldroommanager
		delegate "verifyticket" to test_ticketmanager
		delay 1000
	}
	
}









QActor test_coldroommanager context ctxtestsprint1{
	
	[#
		val MAXW : Int = 100
		var CurrentWeight : Int = 0
		var FreeSpace : Int = 100
		var TruckLoad : Int = 0
		var TruckTicket : Int = 0
		var Requests = hashMapOf<Int,Int>()
		var Response : Boolean = false
	#]
	
	State s0 initial{
		println("COLD ROOM STARTING,capienza: $MAXW, free space: $FreeSpace") color green
		delay 1000
		[#	
			Requests.put(1235, 10)
			Requests.put(1236, 10)
		#]
	}
	Goto waiting
	
	
	
	State waiting {
		println("waiting for requests...") color green
	}
	Transition t0 whenRequest storerequest -> handlestorerequest
				 // whenMsg expiredticket -> handleexpire
				 
				 
	
	State handlestorerequest{
		println("richiesta di deposito in fase di valutazione...") color green 
		onMsg(storerequest: storerequest(KG)){
			[# TruckLoad = payloadArg(0).toInt() #]
		}	
			if [# TruckLoad<= FreeSpace #]{
				[# 
					FreeSpace -= TruckLoad 
				#]
				println("richiesta di deposito accettata, carico: $TruckLoad kg, spazio libero nel frigo: $FreeSpace kg. In attesa di generare un ticket univoco...") color green
				//replyTo storerequest with loadaccepted : loadaccepted(Ticket)
				[# Response = true #]
				request test_ticketmanager -m generateticket : generateticket($TruckLoad)
			}
			else {
				println("richiesta di deposito rifiutata, non c'e spazio sufficiente") color green
				[# Response = false #]
				replyTo storerequest with loadrejected : loadrejected(_)
			}
			
	}
	Goto waiting if [# !Response #] else waitingticket
	
	
	
	State waitingticket{
		println("in attesa della generazione del ticket...") color green
	}
	Transition t0 whenReply ticket -> requestaccepted

				  
	
	State requestaccepted{
		onMsg(ticket: ticket(Ticket)) {
			[#
				TruckTicket = payloadArg(0).toInt()
				Requests.put(TruckTicket, TruckLoad)
			#]
			println("generato il ticket $TruckTicket per la richiesta di deposito di $TruckLoad kg") color green
			replyTo storerequest with loadaccepted : loadaccepted($TruckTicket)
		}
		
		
		println("è stato generato il ticket $TruckTicket per il driver") color green
		replyTo storerequest with loadaccepted : loadaccepted($TruckTicket)
	}
	Goto waiting
	
	
	/*State handleexpire{
		onMsg(expiredticket : expiredticket(Ticket)){
			[#	TruckTicket = payloadArg(0).toInt()	#]
		}
		
		println("il ticket $TruckTicket è scaduto, aggiornamento di free space in corso...") color red
		
		[#
			FreeSpace = FreeSpace - Requests.get(TruckTicket)!!
			Requests.remove(TruckTicket)
		#]
		
		println("il nuovo free space è di $FreeSpace kg") color red
	}
	Goto waiting
	*/
	
}










				 
	




QActor test_ticketmanager context ctxtestsprint1{
	
	[#
		
		
		var Tickets = hashMapOf<Int,Long>()
		var Ticket : Int = 0
		var Now = 0L
		var TruckLoad : Int = 0
		var TICKETTIME = 0L
		var TruckTicket : Int = 0
	#]
	
	State s0 initial{
		println("TICKET MANAGER STARTING") color green 
		memoCurrentTime Now
		
		[#
			Tickets.put(1235, Now + 100000)
			Tickets.put(1236, Now)
		#]
		
	}
	Goto waiting
	
	
	
	State waiting{
		println("waiting for requests...") color green
	}
	Transition t0 whenRequest generateticket -> handlegeneration
				  whenRequest verifyticket -> handleverify
	
	
	
	State handlegeneration{
		onMsg(generateticket: generateticket(KG)){
			[# TruckLoad = payloadArg(0).toInt() #]
		}
		
		println("ricevuta richiesta di generazione ticket, elaborazione in corso...") color green 
		delay 500
		[#
			Ticket = Random.nextInt(10001)+ 1
			while ( Tickets.keys.contains(Ticket)){
				Ticket = Random.nextInt(10001) + 1
			}
		#]
		
		memoCurrentTime Now
		[#
			TICKETTIME = Now + 10000 + TruckLoad * 500
			Tickets.put(Ticket,TICKETTIME)	
		#]
		replyTo generateticket with ticket : ticket($Ticket)
		println("generato il ticket con codice $Ticket e scadenza $TICKETTIME") color green 
	}
	Goto waiting
	
	
	
	
	State handleverify {
		
		println("ricevuta richiesta di verifica di ticket") color green
		onMsg(verifyticket : verifyticket(T)){
			[# TruckTicket = payloadArg(0).toInt() #]
		}
		
		[# 
			if (!Tickets.keys.contains(TruckTicket)){
		#]
		
				println("il ticket $TruckTicket non esiste, inserire nuovamente il codice") color red
				replyTo verifyticket with invalidticket : invalidticket(wrong_ticket)
				
		[# 
			}
		#]
		
		memoCurrentTime Now
		[# 
			if (!(Tickets.get(TruckTicket)!! > Now)){
		#]
		
				println("il ticket $TruckTicket è scaduto, liberare l'Indoor e fare una nuova store request") color red
				replyTo verifyticket with invalidticket : invalidticket(expired_ticket)
				//forward coldroommanager -m expiredticket : expiredticket($TruckTicket)
				[#	Tickets.remove(TruckTicket)	#]
				
		[# 
			} else{
		#]
		
				println("il ticket $TruckTicket è valido, procedere con il deposito") color green
				replyTo verifyticket with chargetaken : chargetaken(_)
				[#	Tickets.remove(TruckTicket)	#]
		[# 
			}
		#]
				
	}
	Goto waiting
	
}












