/* Generated by AN DISI Unibo */ 
package it.unibo.ticketmanager

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
import kotlin.random.Random

class Ticketmanager ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				
				
				var Tickets = hashMapOf<Int,Long>()
				var Ticket : Int = 0
				var Now = 0L
				var TruckLoad : Int = 0
				var TICKETTIME = 0L
				var TruckTicket : Int = 0
				return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("TICKET MANAGER STARTING")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						CommUtils.outgreen("waiting for requests...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="handlegeneration",cond=whenRequest("generateticket"))
					transition(edgeName="t012",targetState="handleverify",cond=whenRequest("verifyticket"))
				}	 
				state("handlegeneration") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("generateticket(TruckLoad)"), Term.createTerm("generateticket(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 TruckLoad = payloadArg(0).toInt()  
						}
						CommUtils.outgreen("ricevuta richiesta di generazione ticket, elaborazione in corso...")
						delay(500) 
						
									Ticket = Random.nextInt(10001)+ 1
									while ( Tickets.keys.contains(Ticket)){
										Ticket = Random.nextInt(10001) + 1
									}
						Now = getCurrentTime()
						
									TICKETTIME = Now + 10000 + TruckLoad * 500
									Tickets.put(Ticket,TICKETTIME)	
						answer("generateticket", "ticket", "ticket($Ticket)"   )  
						CommUtils.outgreen("generato il ticket con codice $Ticket e scadenza $TICKETTIME")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("handleverify") { //this:State
					action { //it:State
						CommUtils.outgreen("ricevuta richiesta di verifica di ticket")
						if( checkMsgContent( Term.createTerm("verifyticket(TruckTicket)"), Term.createTerm("verifyticket(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 TruckTicket = payloadArg(0).toInt()  
						}
						 
									if (!Tickets.keys.contains(TruckTicket)){
						CommUtils.outred("il ticket $TruckTicket non esiste, inserire nuovamente il codice")
						answer("verifyticket", "invalidticket", "invalidticket(wrong_ticket)"   )  
						 
									}
						Now = getCurrentTime()
						 
									if (!(Tickets.get(TruckTicket)!! > Now)){
						CommUtils.outred("il ticket $TruckTicket è scaduto, liberare l'Indoor e fare una nuova store request")
						answer("verifyticket", "invalidticket", "invalidticket(expired_ticket)"   )  
						forward("expiredticket", "expiredticket($TruckTicket)" ,"coldroommanager" ) 
							Tickets.remove(TruckTicket)	 
						 
									} else{
						CommUtils.outgreen("il ticket $TruckTicket è valido, procedere con il deposito")
						answer("verifyticket", "chargetaken", "chargetaken(_)"   )  
							Tickets.remove(TruckTicket)	 
						 
									}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
} 
